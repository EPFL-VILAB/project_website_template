(function($) {
    "use strict"
    var map_to_display_names = {
        'autoencoder': 'Autoencoding',
        'curvature': '3D Curvature',
        'class_places': 'Scene Classification',
        'denoise': 'Denoising Autoencoding',
        'edge2d': '2D Texture Edges',
        'edge3d': '3D Occlusion Edges',
        'ego_motion': 'Triplet Camera Pose',
        'fix_pose': 'Pairwise Fixated Camera Pose',
        'keypoint2d': '2D Keypoints',
        'keypoint3d': '3D Keypoints',
        'non_fixated_pose': 'Pairwise Non-fixated Camera Pose',
        'point_match': 'Point Matching',
        'reshade': 'Reshading',
        'rgb2depth': 'Depth',
        'rgb2mist': 'Euclidean Distance',
        'rgb2sfnorm': 'Normals',
        'room_layout': 'Room Layout',
        'segment25d': 'Unsupervised 2.5D Segm.',
        'segment2d': 'Unsupervised 2D Segm.',
        'vanishing_point_well_defined': 'Vanishing Points',
        'segmentsemantic_rb': 'Semantic Segmentation',
        'class_selected': 'Object Classification (100)',
        'class_1000': 'Object Classification',
        'random': 'Random Projection Feature',
        'self': 'Task-Specific',
        'pixels': 'Only Image',
        'impainting_whole': 'Image In-painting',
        'colorization': 'Colorization',
        'jigsaw': 'Jigsaw Puzzle',
        'rgb2sfnormb': 'Baseline U-Net Normals',
        'rgb2depthb': 'Baseline U-Net Depth',
        'reshadeb': 'Baseline U-Net Reshading',
        'curvature_baseline': 'Curvature (Baseline Readout)',
        'curvature_consistency': 'Curvature',
        'edge2d_baseline' : '2D Edges (Baseline Readout)',
        'edge2d_consistency' : '2D Edges',
        'edge3d_baseline' : 'Occlusion Edges (Baseline Readout)',
        'edge3d_consistency' : 'Occlusion Edges',
        'keypoint2d_baseline' : '2D Keypoints (Baseline Readout)',
        'keypoint2d_consistency' : '2D Keypoints',
        'keypoint3d_baseline' : '3D Keypoints (Baseline Readout)',
        'keypoint3d_consistency' : '3D Keypoints',

        'rgb2normal_cycle' : 'Cycle-Consistency Baseline',
        'rgb2normal_geonet' : 'GeoNet Baseline Normals',
        'rgb2normal_multitask' : 'Multitask Baseline Normals',

        'rgb2depth_geonet' : 'GeoNet Baseline Depth',
        'rgb2depth_multitask' : 'Multitask Baseline Depth',

        'rgb2reshading_multitask' : 'Multitask Baseline Reshading',

        'rgb2sfnorm1': 'Consistency Normals',
        'rgb2depth1': 'Consistency Depth',
        'reshade1': 'Consistency Reshading',
        'kenburns': 'From Consistency Depth',

        'rgb2normal_taskonomy':'Taskonomy Baseline Normals',
        'rgb2depth_taskonomy' :'Taskonomy Baseline Depth',
        'rgb2reshading_taskonomy': 'Taskonomy Baseline Reshading',
        'energy': 'Consistency Energy of Query Image (Red Line)',
    }
    var display_names_to_task = []; // or var revMap = {};
    Object.keys(map_to_display_names).forEach(function(key) { 
        display_names_to_task[map_to_display_names[key]] = key;   
    });

    var VALID_TARGETS = [];
    // [
    //     'Autoencoding', 'Curvature', 'Scene Class.', 'Denoising', '2D Edges', 'Occlusion Edges',
    //     '2D Keypoints', '3D Keypoints', 'Reshading', 'Z-Depth', 'Distance', 'Normals', 'Layout',
    //     '2.5D Segm.', '2D Segm.', 'Vanishing Pts.', 'Semantic Segm.',  'Object Class. (1000)', 
    //     'Colorization', 'Jigsaw', 'In-painting'
    // ]
    var sortOrder_old = [
        'rgb2sfnorm',
        'reshade',
        'rgb2depth',
        'rgb2sfnormb',
        'reshadeb',
        'rgb2depthb',
        'curvature_consistency',
        'edge2d_consistency',
        'edge3d_consistency',
        'curvature_baseline',
        'edge2d_baseline',
        'edge3d_baseline',
        'keypoint2d_consistency',
        'keypoint3d_consistency',
        'keypoint2d_baseline',
        'keypoint3d_baseline',

        ];

    var sortOrder = [
        'rgb2sfnorm',
        'reshade',
        'rgb2depth',
        'curvature_consistency',
        'edge2d_consistency',
        'edge3d_consistency',
        'keypoint2d_consistency',
        'keypoint3d_consistency',

        'rgb2sfnorm1',
        'rgb2sfnormb',
        'rgb2normal_cycle',
        'rgb2normal_geonet',
        'rgb2normal_taskonomy',
        'rgb2normal_multitask',

        'reshade1',
        'reshadeb',
        'rgb2reshading_taskonomy',
        'rgb2reshading_multitask',
  
        'rgb2depth1',
        'rgb2depthb',
        'rgb2depth_geonet',
        'rgb2depth_taskonomy',
        'rgb2depth_multitask',
        
        'energy',
        'kenburns',
        ];


    for (var i in sortOrder){
        VALID_TARGETS.push(map_to_display_names[sortOrder[i]]);
    }

    var getToken = function() {
        return "aa" + Math.random().toString(36).substr(2); // remove `0.`
    };

    document.getElementById("uploadToken").value = getToken();

    var source_exists = false;
    var all_videos = [];

    var clearDemo = function(){
        document.getElementById("output-section").innerHTML = "";        
        // document.getElementById("our-vids").innerHTML = "";
        // document.getElementById("alex-vids").innerHTML = "";
        // document.getElementById("scratch-vids").innerHTML = "";
        all_videos = [];
        source_exists = false;
    };
    $('#clearDemo').on("click", clearDemo);


    var loaderHTML = `
    <div class="spinner"></div>`;

    var makeImageFrame = function(title, ensureSameSize) {
        var imageHolder = document.createElement("div");
        imageHolder.classList.add('col-xs-12');
        imageHolder.classList.add('col-sm-6');
        imageHolder.classList.add('col-lg-4');
        // imageHolder.classList.add('col-xs-' + cols.toString());
        imageHolder.classList.add('no-pad');
        imageHolder.classList.add('image-holder');

        if ((title=='Baseline U-Net Normals') || (title=='Baseline U-Net Depth') || (title=='Baseline U-Net Reshading')){
            title = 'Baseline U-Net';
        }

        if ((title=='Consistency Normals') || (title=='Consistency Depth') || (title=='Consistency Reshading')){
            title = 'Consistency';
        }

        if ((title=='GeoNet Baseline Normals') || (title=='GeoNet Baseline Depth')){
            title = 'GeoNet Baseline';
        }

        if ((title=='Multitask Baseline Normals') || (title=='Multitask Baseline Depth')  ||  (title=='Multitask Baseline Reshading')){
            title = 'Multitask Baseline';
        }

        if ((title=='Taskonomy Baseline Normals') || (title=='Taskonomy Baseline Depth')  ||  (title=='Taskonomy Baseline Reshading')){
            title = 'Taskonomy Baseline';
        }

        var titleElem = document.createElement("div");
        titleElem.innerHTML = "<h4 style='word-wrap: break-word;padding-bottom: 5px;margin-bottom: 0px'>" + title + "</h4>";

        var loader = document.createElement("div");
        loader.innerHTML = loaderHTML;
        //if (title=='From Consistency Depth'){
        //
        //  loader.innerHTML = '<video muted playsinline preload="metadata" width=100%' + ' height=100%' + ' style="background-color:#ddd" class=' + 'hi' + ' loop >' + '</video>'
        //}

        if (ensureSameSize) {
            titleElem.classList.add('returnedImageTitle');
            imageHolder.classList.add('returnedImage');
        }
        
        imageHolder.appendChild(titleElem);
        imageHolder.appendChild(loader);
        return [imageHolder];
    }


   var makeVideoFrame = function(title, vid_name) {
        var videoHolder = document.createElement("div");
        videoHolder.classList.add('col-xs-12');
        videoHolder.classList.add('col-sm-6');
        videoHolder.classList.add('col-lg-4');
        // imageHolder.classList.add('col-xs-' + cols.toString());
        videoHolder.classList.add('no-pad');
      
      
        var titleElem = document.createElement("div");
        titleElem.innerHTML = "<h4 style='word-wrap: break-word;padding-bottom: 5px;margin-bottom: 0px'>" + title + "</h4>";

        //alert(vid_name);
        var cls = "hi";
        var vid = document.createElement("div");


        vid.innerHTML = '<video muted playsinline preload="metadata" crossorigin="anonymous" width=100%' + 
            ' height=100%' + 
            ' style="background-color:#ddd" class=' + cls + 
            ' loop >' +
            '<source src="' + vid_name + '" type="video/mp4">' +
            //'<source src="https://s3.us-west-2.amazonaws.com/task-preprocessing-512-oregon/video_short/' + vid_name + '" type="video/webm">' +
            //'<source src="https://s3.us-west-2.amazonaws.com/task-preprocessing-512-oregon/video_short_mp4/' + vid_name.replace('webm', 'mp4') + '" type="video/mp4">' +
            'Video not found.</video>';

        
        videoHolder.appendChild(titleElem);
        videoHolder.appendChild(vid);
       
        return [videoHolder, vid];
    }


    var ensureSameSize = function(className){
        var boxes = $('.' + className);
        var maxHeight = Math.max.apply(
          Math, boxes.map(function() {
            return $(this).outerHeight();
        }).get());
        // boxes.height(maxHeight);
        boxes.css('height', maxHeight);        
        return maxHeight;
    };

    var resizeMinHeight = function(className) {
        var boxes = $('.' + className);
        boxes.css('height', "");        
        ensureSameSize(className);
    }

    var all_videos = [];
    var play_all = function(vids) {



            vids.forEach( function(vid) {
                vid = vid.children[0];
                vid.play();
            });

        };

    var updateImageFrame = function(imageHolder, image_uri, crop) {    
        imageHolder.children[1].remove();
        var containerDiv = document.createElement("div");
        if (crop) {
            containerDiv.className = 'thumbnail2';
        }

        var choice = image_uri[image_uri.length-1];
    
        var oImg = document.createElement("img");
        if (choice=='4'){
        var oImg = document.createElement("video");
            //oImg.innerHTML = '<video muted playsinline preload="metadata" crossorigin="anonymous" width=100%' + 
            //' height=100%' + 
            //' style="background-color:#ddd" class=' + 'hi' + 
            //' loop >' +
            ////'<source src="https://s3.us-west-2.amazonaws.com/task-preprocessing-512-oregon/video_short/' + vid_name + '" type="video/webm">' +
            ////'<source src="https://s3.us-west-2.amazonaws.com/task-preprocessing-512-oregon/video_short_mp4/' + vid_name.replace('webm', 'mp4') + '" type="video/mp4">' +
            //'</video>';

            oImg.setAttribute('playsinline', 'True');
            oImg.setAttribute('muted', 'True');
            oImg.setAttribute('autoplay', 'True');
            //oImg.classList.add('playsinline');
            //oImg.classList.add('muted');
            //oImg.classList.add('autoplay');
            oImg.setAttribute('height', '100%');
            oImg.setAttribute('width', '100%')
            oImg.onload = function() {
                ensureSameSize('returnedImageTitle');
                resizeMinHeight('returnedImage');
            }
            oImg.setAttribute('crossorigin', "anonymous");
            oImg.setAttribute('src', image_uri);
            oImg.setAttribute('loop', 'True');
            //oImg.play();
            //all_videos.push(oImg);
            //play_all(all_videos);
        }
        else{
        oImg.setAttribute('alt', 'na');
        if (!crop){
            oImg.setAttribute('height', '100%');
            oImg.setAttribute('width', '100%')
            oImg.onload = function() {
                ensureSameSize('returnedImageTitle');
                resizeMinHeight('returnedImage');
            }

        }
        else {
            oImg.onload = function() {
                oImg.className = oImg.width > oImg.height ? '' : 'portrait';                
            }
        }
        oImg.setAttribute('crossorigin', "anonymous");
        oImg.setAttribute('src', image_uri);  

        }      
        containerDiv.appendChild(oImg);
        imageHolder.appendChild(containerDiv);
       
        return [imageHolder, oImg];
    }

    var loadFile = async function(event) {
        var fileSizeInMB = $('#imageUploadInput')[0].files[0].size/1024/1024;
        if (fileSizeInMB > 10.0) {
            alert('Please ensure upload is < 10MB. The current image size is: ' + fileSizeInMB.toFixed(2) + "MB.");
            document.getElementById("imageUploadInput").value = '';
            return;
        }

        document.getElementById("uploadToken").value = getToken();
        var image_uri = URL.createObjectURL(event.target.files[0])
        //showSourceImage(image_uri);
       
        if (fileSizeInMB > 1.5) {
        //alert('downsampling');
        //alert(resizedataURL(image_uri, 512, 512));
        var imgss = await resizedataURL(image_uri, 512, 512);
        //alert(imgss.src);

        //var imgss = new Image();
        //var imgss2 = new Image();
        //imgss.onload=start;
        //imgss.src = image_uri;
        //imgss.onload=start;
        //var canvas = document.createElement('canvas');
        //var ctx = canvas.getContext('2d');
        //imgss.onload=start;
        //function start(callback){

         // We set the dimensions at the wanted size.
        //        canvas.width = 512;
        //        canvas.height = 512;
        //        ctx.drawImage(imgss, 0, 0, 512, 512);
        //        var dataURI = canvas.toDataURL();
        //        var blob = dataURLtoBlob(dataURI);
        //        var curr_uri = URL.createObjectURL(blob);
        //        image_uri = curr_uri;
                
        //}
        //alert(imgss2.src);

        }

        alert(imgss);      
      
        //alert(image_uri);
        showSourceImage(image_uri);
 
    };


    // Takes a data URI and returns the Data URI corresponding to the resized image at the wanted size.
function resizedataURL(datas, wantedWidth, wantedHeight){
        return new Promise(async function(resolve,reject){
        
        // We create an image to receive the Data URI
        var imgss = document.createElement('img');

        // When the event "onload" is triggered we can resize the image.
          imgss.onload = function()
               {        
                
                // We create a canvas and get its context.
                var canvas = document.createElement('canvas');
                var ctx = canvas.getContext('2d');

                // We set the dimensions at the wanted size.
                canvas.width = wantedWidth;
                canvas.height = wantedHeight;
                

                // We resize the image with the canvas method drawImage();
                ctx.drawImage(this, 0, 0, wantedWidth, wantedHeight);

                var dataURI = canvas.toDataURL();
          
                var blob = dataURLtoBlob(dataURI);
                var curr_uri = URL.createObjectURL(blob);
                //alert(curr_uri);
                //return curr_uri;
                resolve(curr_uri);
                
                /////////////////////////////////////////
                // Use and treat your Data URI here !! //
                /////////////////////////////////////////
            };

        
        // We put the Data URI in the image's src attribute
        imgss.src = datas;
        //return imgss;
        //alert(img.src);
        //alert('hey');
        //return curr_uri;
        
       })
    }
// Use it like that : resizedataURL('yourDataURIHere', 50, 50);

    function dataURLtoBlob(dataurl) {
    var arr = dataurl.split(','), mime = arr[0].match(/:(.*?);/)[1],
        bstr = atob(arr[1]), n = bstr.length, u8arr = new Uint8Array(n);
    while(n--){
        u8arr[n] = bstr.charCodeAt(n);
    }

  
    return new Blob([u8arr], {type:mime});
     }

    var showSourceImage = function(image_uri) {
        clearDemo();
        document.getElementById("source-section").innerHTML = ""; 
        var imFrame = makeImageFrame("Input Image", false);        
        imFrame = updateImageFrame(imFrame[0], image_uri, true);        
        imFrame[0].classList.remove('col-sm-6');
        imFrame[0].classList.remove('col-med-6');
        imFrame[0].classList.remove('col-lg-4');
        //document.getElementById("source-section").setAttribute("data-spy", "affix");
        //document.getElementById("source-section").setAttribute("data-offset-top", "01");
        document.getElementById("source-section").appendChild(imFrame[0]);
    }

    $('#imageUploadInput').on("change", loadFile);


    $('#formResponse').on("change", function(event){
        console.log(event);
    });

    
    var setIntervalWithMaxAttempts = function(callback, interval, maxAttempts) {
        var intervalId = null;
        var counter = 0;
        var wrappedCallback = function(){
            if (maxAttempts != null && counter < maxAttempts) {
                clearInterval(intervalId);
                return;
            }
            counter += 1;
            callback();
        }

        intervalId = setInterval(callback, 1000);        
    };


    var intervals = []
    var num_on_row = 0;
    var getResponseURLs = function(uploadtoken, task, callback){    
        

        if (display_names_to_task[task]=='kenburns'){
        var imFrame = makeVideoFrame(task, 'https://storage.googleapis.com/task-demo-results/predictions/' +uploadtoken+ '__kenburns.mp4');
        }
        else {        
        var imFrame = makeImageFrame(task, true);
        }
        document.getElementById("output-section").appendChild(imFrame[0]);
        
        num_on_row += 1;
        // if (num_on_row * 4 >= 12) {
        //     num_on_row = 0;
        //     var newRow = document.createElement("div");
        //     newRow.className = 'row';
        //     document.getElementById("output-section").appendChild(newRow);
        // }

        var curr_task = display_names_to_task[task]+'.png';

        if (curr_task=='kenburns.png'){
           curr_task='kenburns.mp4';
        }

       
        if (curr_task=='rgb2sfnorm1.png'){
            curr_task='rgb2sfnorm.png';
        }
        if (curr_task=='reshade1.png'){
            curr_task='reshade.png';
        }
        if (curr_task=='rgb2depth1.png'){
            curr_task='rgb2depth.png';
        }


        var checkTaskIntervalId = null;        
        var checkTaskCounter = 0;
        var maxCheckTaskAttempts = 120
        var checkTask = function(){
            if (checkTaskCounter >= maxCheckTaskAttempts) {
                clearInterval(checkTaskIntervalId);
                return;
            }
            checkTaskCounter += 1;

            // Code to execute
            var xhr = new XMLHttpRequest();
        
            var imageUri = encodeURI(
                "https://storage.googleapis.com/task-demo-results/predictions/" + uploadtoken + "__" + curr_task);

           
            //xhr.onload = function () {
            //    // Request finished. Do processing here.
            //    var rawResponse = xhr.responseText; // truncated for example
    
            //     // convert to Base64
            //     var b64Response = btoa(unescape(encodeURIComponent(rawResponse)));
                
            //     // create an image
            //      outputImg.src = 'data:image/png;base64,'+b64Response;
                
            //     // append it to your page
            //     document.body.appendChild(outputImg);
            //     console.log(imageUri);
            //     callback(task, imFrame, imageUri);   
            //     console.log("response", xhr.responseText);         
            //     clearInterval(checkTaskIntervalId);                
            // };
            
            xhr.ontimeout = function (e) {
                    console.log(task + ' stalled');
            };

            xhr.onreadystatechange = function() {
                if(xhr.readyState == 4 && xhr.status == 200) {
                    // console.log(imageUri);
                    callback(task, imFrame, imageUri);   
                    // console.log("response", xhr.responseText);  
                    clearInterval(checkTaskIntervalId);
                    intervals.pop(intervals.indexOf(checkTaskIntervalId), 1); //Remove
                } 
                else {
                    // console.log("404:", checkTaskCounter,  Date.now());                    
                }
            };
            xhr.open(
                'HEAD', 
                encodeURI(
                    "https://storage.googleapis.com/task-demo-results/predictions/" + uploadtoken + "__" + curr_task ),
                true);
            xhr.timeout = 3000;
            xhr.send();

          
        };
        console.log(encodeURI(
            "https://storage.googleapis.com/task-demo-results/predictions/" + uploadtoken + "__" + curr_task));
        // checkTask();
        checkTaskIntervalId = setInterval(checkTask, 3000);
        intervals.push(checkTaskIntervalId);
            // xhr.onreadystatechange = function()
            // {
            //     if(xhr.readyState == 4 && xhr.status == 200) {
            //         callback(task, imFrame, xhr.responseText);
            //     } else {
            //         console.log(task + ' failed');
            //     }
            // }
            // xhr.send(null);
    };


    var formValid = function() {
        var imageUploadInput = document.getElementById("imageUploadInput");
        var uploadToken = document.getElementById("uploadToken").value;
        var isSample = false;
        $(".sample-img").each(function() { 
            if (this.id == uploadToken) {
                isSample = true;
            }
            else {
                console.log(this.id, uploadToken);
            }
        } );
        console.log((isSample || imageUploadInput.value != "") && grecaptcha.getResponse().length > 0    );
        return (isSample || imageUploadInput.value != "") && grecaptcha.getResponse().length > 0

    };


    var makeRowTitle = function(title) {
        var folderName = title == "Source" ? 'video_short' : 'video_short';
        var videoHolder = document.createElement("div");
        videoHolder.classList.add('col-xs-12');
        // videoHolder.classList.add('no-pad');

        var bb = videoHolder.getBoundingClientRect();
        var width = bb.right - bb.left;


        // var titleElem = document.createElement("div");
        // videoHolder.innerHTML = "<h4 style='float:right; transform: translateX(-100%) rotate(-90deg) ;'>" + title + "</h4>";
        videoHolder.innerHTML = "<h3 style='text-align:center;    text-decoration: underline; '>" + title + "</h4>";

        // videoHolder.appendChild(titleElem);
        return videoHolder;
    }

    $('#submitDemo').on("click",function() {
        if (!formValid()){
            return;
        }
        document.getElementById("output-section").innerHTML = ""; 
        var uploadtoken = document.getElementById("uploadToken").value;
        // var selectedTasks = $("#targetpicker").val()

        var titleElem = makeRowTitle("Consistency-based Learning Prediction Results");
        document.getElementById("output-section").appendChild(titleElem);

        for (var t in VALID_TARGETS) {
            var task = VALID_TARGETS[t];
            // Make the api call here...
            getResponseURLs(uploadtoken, task, function(taskname, imFrame, image_uri){
                // var imFrame = makeImageFrame(taskname, 4);
                imFrame = updateImageFrame(imFrame[0], image_uri, false);
            });
            // break;

           if (task=='3D Keypoints')  {

            var titleElem = makeRowTitle("Consistency-based Learning vs Baselines (Normals)");
        document.getElementById("output-section").appendChild(titleElem);


           }


           if (task=='Multitask Baseline Normals'){

            var titleElem = makeRowTitle("Consistency-based Learning vs Baselines (Reshading)");
        document.getElementById("output-section").appendChild(titleElem);

           }



           if (task=='Multitask Baseline Reshading') {

            var titleElem = makeRowTitle("Consistency-based Learning vs Baselines (Depth)");
        document.getElementById("output-section").appendChild(titleElem);


           } 

         if (task=='Multitask Baseline Depth') {

            var titleElem = makeRowTitle("Energy");
       document.getElementById("output-section").appendChild(titleElem);


           }

       if (task=='Consistency Energy of Query Image (Red Line)') {

            var titleElem = makeRowTitle("3D Ken Burns");
       document.getElementById("output-section").appendChild(titleElem);


           }



        }
    });

    $('#uploadForm').on("submit",function() {
        if (!formValid()){
            return;
        }
        document.getElementById("imageUploadInput").style = "display:none";;        
        document.getElementById("imageUploadInputLabel").style = "display:none";;        
        
      
        document.getElementById("submitDemo").disabled=true;
        document.getElementById("submitDemo").value="refresh to upload new image";
    });
    

    $('.sample-img').each(function() {
        $( this ).on("click", function() {
            document.getElementById("uploadToken").value = this.id;
            $('.sample-img').each(function() {
                if (this.id == document.getElementById("uploadToken").value) {
                    this.classList.add('selected');
                }
                else {
                    this.classList.remove('selected');
                }
            });
            showSourceImage(this.src);

            var titleElem = makeRowTitle("Consistency-based Learning Prediction Results");
            document.getElementById("output-section").appendChild(titleElem);

            var uploadtoken = document.getElementById("uploadToken").value;
            
            for (var t in VALID_TARGETS) {
                var task = VALID_TARGETS[t];
                // Make the api call here...
                getResponseURLs(uploadtoken, task, function(taskname, imFrame, image_uri){
                    // var imFrame = makeImageFrame(taskname, 4);
                    imFrame = updateImageFrame(imFrame[0], image_uri, false);
                });
                // break;
 
              if (task=='3D Keypoints')  {

            var titleElem = makeRowTitle("Consistency-based Learning vs Baselines (Normals)");
        document.getElementById("output-section").appendChild(titleElem);


           }


           if (task=='Multitask Baseline Normals'){

            var titleElem = makeRowTitle("Consistency-based Learning vs Baselines (Reshading)");
        document.getElementById("output-section").appendChild(titleElem);

           }



           if (task=='Multitask Baseline Reshading') {

            var titleElem = makeRowTitle("Consistency-based Learning vs Baselines (Depth)");
        document.getElementById("output-section").appendChild(titleElem);


           } 

          if (task=='Multitask Baseline Depth') {

            var titleElem = makeRowTitle("Energy");
            document.getElementById("output-section").appendChild(titleElem);


           }


          if (task=='Consistency Energy of Query Image (Red Line)') {

            var titleElem = makeRowTitle("3D Ken Burns");
       document.getElementById("output-section").appendChild(titleElem);


           }


            }
        });
    });

    $( document ).ready (
        function () {
            $('#sample4').click();

            ensureSameSize('returnedImageTitle');
            $( window ).resize(function() {
                resizeMinHeight('returnedImageTitle');
                resizeMinHeight('returnedImage');
            });
        }
    );
})(jQuery);

